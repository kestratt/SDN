[CmdletBinding()]
param
(
    # Path to the module defining the strategy to use for monitoring the node
    [string]
    $StrategyModulePath = "C:\k\debug\EndpointDegradedStrategyModule.psm1"
)  

function Start-HNSTrace
{
    .\collectlogs.ps1
    .\collect-windows-logs.ps1
    $sessionName = 'HnsCapture'
    Write-Host "Starting HNS tracing"

    $curDir = Get-Location
    # Generate a random directory to capture all the logs
    $etlPath = [io.Path]::Combine($curDir.Path, "HNSTrace.etl")
    .\starthnstrace.ps1 -NoPrompt -MaxFileSize 1024 -EtlFile $etlPath
}

function Stop-HNSTrace
{
    # Stop the tracing
    $sessionName = 'HnsCapture'
    Write-Host "Stopping $sessionName."
    Stop-NetEventSession $sessionName 

    # Collect logs
    .\collectlogs.ps1
    .\collect-windows-logs.ps1

    # Take a HNS Process dump
    $hnsProcessId = Get-WmiObject -Class Win32_Service -Filter "Name LIKE 'Hns'" | Select-Object -ExpandProperty ProcessId
    .\Procdump\Procdump.exe -ma $hnsProcessId /accepteula
}

'''
Start-Monitoring

Monitors Windows node for an error condition by polling every 15 seconds.
Gathers all the necessary logs if Windows node goes into an error/faulted state. 
'''
function Start-Monitoring
{
    param
    (
        # Path with filename where the configuration module is located
        [string]
        $StrategyModulePath = "C:\k\debug\EndpointDegradedStrategyModulePath.psm1",

        # Interval to poll for failure in seconds 
        [int]
        $PollingInterval = 15,

        # Number of consecutive failures to declare the node is faulty
        [int]
        $FailureThreshold = 2
    )

    $curDir = Get-Location
    # Generate a random directory to capture all the logs
    $outDir = [io.Path]::Combine($curDir.Path, [io.Path]::GetRandomFileName())
    md $outDir
    pushd
    cd $outDir

    # Download necessary files
    wget https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/windows/debug/collectlogs.ps1 -o collectlogs.ps1
    wget https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/windows/debug/VFP.psm1 -o VFP.psm1
    wget https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/windows/hns.psm1 -o HNS.psm1
    wget https://raw.githubusercontent.com/Azure/aks-engine/master/scripts/collect-windows-logs.ps1 -o collect-windows-logs.ps1
    wget https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/windows/debug/starthnstrace.ps1 -o starthnstrace.ps1
    wget https://download.sysinternals.com/files/Procdump.zip -o Procdump.zip
    Expand-Archive .\Procdump.zip
    wget $StrategyModulePath -o StrategyModule.psm1
    ipmo .\VFP.psm1
    ipmo .\HNS.psm1
    ipmo .\StrategyModule.psm1

    Start-HNSTrace
    StartHandler

    LogMessage "Started Monitoring"
    [System.Collections.ArrayList] $degradedEndpoints = @()
    [System.Collections.ArrayList] $endpoints = @()
    while($true)
    {    
        foreach ($endpoint in $endpoints)
        {
            $isDegraded = $endpoint.State -eq 5
            $prevDegraded = $degradedEndpoints.contains($endpoint.ID)
            #check to see if endpoint is still degraded after polling time
            if ($prevDegraded)
            {
                #collect logs if the port is still blocked
                if ($isDegraded)
                {
                    LogMessage "Endpoint $($endpoint.ID) has been degraded for => polling interval ending HNS tracing"
                    Stop-HNSTrace
                    popd

                    TerminateHandler($outDir)

                    LogMessage "Diagnostic logs are available at $outDir"

                    return
                }
                #Remove if the endpoint isn't degraded anymore
                else
                {
		            LogMessage "removing endpoint: $endpoint.ID"
                    $endpoints.Remove($degradedEndpoint.ID)
                }
            }
            #Add endpt if degraded
            elseif($isDegraded){LogMessage "Adding endpoint: $endpoint.ID"; $degradedEndpoints.Add($endpoint.ID)}
            
        } 
        Start-Sleep -Seconds $PollingInterval
        $endpoints = Get-HNSEndpoint | ? VirtualNetworkName -eq $networkName
    }
}

##### Start execution #########

Start-Monitoring -StrategyModulePath $StrategyModulePath